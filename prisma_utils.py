import os
import csv
import requests
import logging
import sys

# Path to key file to configure API client - required unless KEY_ID and SECRET_KEY is set
KEY_FILE = os.environ.get('PRISMA_KEY_FILE')

# SaaS Tenant API Key - required unless KEY_FILE is set
KEY_ID = os.environ.get('KEY_ID')
SECRET_KEY = os.environ.get('SECRET_KEY')

# Enable logging here as needed
logging.basicConfig(stream=sys.stdout, level=logging.INFO)
log = logging.getLogger()

# Get values from API key file and set KEY_ID and SECRET_KEY
# Requires: /path/to/key/file
def read_key_file(key_file):
    global KEY_ID
    global SECRET_KEY
    # parse CSV using default format as generated by Prisma Console
    keys = []
    values = []
    # make a map/dict out of K,V-style CSV file
    with open(key_file) as f:
        reader = csv.reader(f)
        for row in reader:
            keys.append(row[0])
            values.append(row[1])
            
    kv = dict(zip(keys, values))

    # set creds
    KEY_ID = kv.get('Access Key ID')
    SECRET_KEY = kv.get('Secret Key')

###############################################################################################################################

# CSPM GLOBALS
CSPM_BASE_URL = os.environ.get('CSPM_BASE_URL')  # example: https://api3.prismacloud.io
CSPM_TOKEN = os.environ.get('CSPM_TOKEN')  # not required, redundant if KEY_FILE or KEY_ID + SECRET_KEY are configured

# Log into CSPM (includes Code Security)
# Requires: KEY_ID and SECRET_KEY. 
# Function returns short-lived JWT and sets value of CSPM_TOKEN
def cspm_login(key_id=None, secret=None):
    global KEY_ID, SECRET_KEY, CSPM_TOKEN

    KEY_ID = key_id
    SECRET_KEY = secret

    if not KEY_ID or not SECRET_KEY:
        read_key_file(KEY_FILE)

    headers = {"content-type": "application/json; charset=UTF-8"}
    
    payload = {"username": KEY_ID, "password": SECRET_KEY}

    response = requests.request("POST", CSPM_BASE_URL+"/login", headers=headers, json=payload)
    
    if response.status_code == 200:
        #log.info("Login succesfull!") # removed for cleaning output
        CSPM_TOKEN = response.json().get("token")
        return CSPM_TOKEN
    else:
        log.error("Login Error: ", response, response.text)
        exit


# Renew Prisma API token, optionally pass current token
def cspm_renew(token=None):
    global CSPM_TOKEN
    
    if token:
        CSPM_TOKEN = token 

    headers = {
        "Accept":"application/json", 
        "x-redlock-auth": CSPM_TOKEN
    } 

    response = requests.request("GET", CSPM_BASE_URL+"/auth_token/extend", headers=headers, data={})
    
    if response.status_code == 200:
        #log.info("API Token Renewed") # removed for cleaning output
        CSPM_TOKEN = response.json().get("token")
        return CSPM_TOKEN
    else:
        log.error("Login Error: ", response, response.text)
        exit


###############################################################################################################################

# CWP GLOBALS
CWP_BASE_URL = os.environ.get('CWP_BASE_URL')  # example https://us-west1.cloud.twistlock.com/us-1-2345678/api/v1
CWP_TOKEN = os.environ.get('CWP_TOKEN')  # not required, redundant if KEY_FILE or KEY_ID + SECRET_KEY are configured

# Log into CWP (Compute)
# Requires: SECRET KEY and KEY ID - input username (as ID) and password (as Secret) for self-hosted tenants 
# Function returns short-lived JWT, sets value of CWP_TOKEN
def cwp_login():
    global CWP_TOKEN

    if not KEY_ID or not SECRET_KEY:
        read_key_file(KEY_FILE)


    headers = {"content-type": "application/json; charset=UTF-8"}
    payload = {"username": KEY_ID, "password": SECRET_KEY}
    
    response = requests.request("POST", CWP_BASE_URL+"/api/v1/authenticate", headers=headers, json=payload, verify=False)
    
    if response.status_code == 200:
        #log.debug("Login succesfull!")
        CWP_TOKEN = response.json().get("token")
        return CWP_TOKEN
    else:
        log.error("Login Error: ", response, response.text)
        exit


# Renew CWP/Compute token, optionally pass token
def cwp_renew(token=None):
    global CWP_TOKEN

    if token:
        CWP_TOKEN=token

    headers = {"Authorization": "Bearer " + CWP_TOKEN}
    
    response = requests.request("GET", CWP_BASE_URL+"/api/v1/authenticate/renew", headers=headers, params={}, verify=False)
    
    if response.status_code == 200:
        #log.info("API Token Renewed") # removed for cleaning output
        CWP_TOKEN = response.json().get("token")
        return CWP_TOKEN
    else:
        log.error("Login Error: ", response, response.text)
        exit




